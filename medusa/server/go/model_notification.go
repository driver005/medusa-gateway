/*
 * Medusa Admin API
 *
 * API reference for Medusa's Admin endpoints. All endpoints are prefixed with `/admin`.  ## Authentication  There are two ways to send authenticated requests to the Medusa server: Using a user's API token, or using a Cookie Session ID.  <!-- ReDoc-Inject: <SecurityDefinitions> --> 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

// Notification - Notifications a communications sent via Notification Providers as a reaction to internal events such as `order.placed`. Notifications can be used to show a chronological timeline for communications sent to a Customer regarding an Order, and enables resends.
type Notification struct {

	// The notification's ID
	Id string `json:"id,omitempty"`

	// The name of the event that the notification was sent for.
	EventName string `json:"event_name,omitempty"`

	// The type of resource that the Notification refers to.
	ResourceType string `json:"resource_type"`

	// The ID of the resource that the Notification refers to.
	ResourceId string `json:"resource_id"`

	// The ID of the Customer that the Notification was sent to.
	CustomerId string `json:"customer_id,omitempty"`

	// A customer object. Available if the relation `customer` is expanded.
	Customer map[string]interface{} `json:"customer,omitempty"`

	// The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id
	To string `json:"to"`

	// The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend.
	Data map[string]interface{} `json:"data,omitempty"`

	// The resends that have been completed after the original Notification.
	Resends []NotificationResend `json:"resends,omitempty"`

	// The id of the Notification Provider that handles the Notification.
	ProviderId string `json:"provider_id,omitempty"`

	Provider NotificationProvider `json:"provider,omitempty"`

	// The date with timezone at which the resource was created.
	CreatedAt time.Time `json:"created_at,omitempty"`

	// The date with timezone at which the resource was updated.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}
